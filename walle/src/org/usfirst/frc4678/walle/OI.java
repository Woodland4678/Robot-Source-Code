// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.walle;

import org.usfirst.frc4678.walle.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton button2;
    public JoystickButton button3;
    public JoystickButton button4;
    public JoystickButton button1;
    public JoystickButton button7;
    public JoystickButton button5;
    public Joystick gamepad1;
    public JoystickButton gp2Button1;
    public JoystickButton gp2Button2;
    public JoystickButton gp2Button3;
    public Joystick gamepad2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        gamepad2 = new Joystick(1);
        
        gp2Button3 = new JoystickButton(gamepad2, 3);
        gp2Button3.whenPressed(new armRest());
        gp2Button2 = new JoystickButton(gamepad2, 2);
        gp2Button2.whenPressed(new armDropBin());
        gp2Button1 = new JoystickButton(gamepad2, 1);
        gp2Button1.whenPressed(new armPickup());
        gamepad1 = new Joystick(0);
        
        button5 = new JoystickButton(gamepad1, 1);
        button5.whenPressed(new toggleGentleMode());
        button7 = new JoystickButton(gamepad1, 7);
        button7.whileHeld(new goToScore());
        button1 = new JoystickButton(gamepad1, 1);
        button1.whenPressed(new PickTote());
        button4 = new JoystickButton(gamepad1, 4);
        button4.whenPressed(new sixTotesLIft());
        button3 = new JoystickButton(gamepad1, 3);
        button3.whenPressed(new Lift());
        button2 = new JoystickButton(gamepad1, 2);
        button2.whenPressed(new Lower());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("RobotDrive", new RobotDrive());

        SmartDashboard.putData("Lift", new Lift());

        SmartDashboard.putData("Lower", new Lower());

        SmartDashboard.putData("PickTote", new PickTote());

        SmartDashboard.putData("sixTotesLIft", new sixTotesLIft());

        SmartDashboard.putData("goToScore", new goToScore());

        SmartDashboard.putData("toggleGentleMode", new toggleGentleMode());

        SmartDashboard.putData("armPickup", new armPickup());

        SmartDashboard.putData("armDropBin", new armDropBin());

        SmartDashboard.putData("armRest", new armRest());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getGamepad1() {
        return gamepad1;
    }

    public Joystick getGamepad2() {
        return gamepad2;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


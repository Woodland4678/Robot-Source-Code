// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4678.GLaDOS.commands;
import com.sun.squawk.io.BufferedWriter;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4678.GLaDOS.Robot;
import java.io.*;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import javax.microedition.io.Connector;
import com.sun.squawk.io.BufferedReader;
import com.sun.squawk.microedition.io.FileConnection;
/**
 *
 */
public class takeLightReading extends Command {
    
    int cnt = 0;
    double lowLightValLeft = 1000;
    double lowLightValRight = 1000;
    public takeLightReading() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        cnt = 0;
        lowLightValLeft = Robot.driveTrain.getLightValueLeft();
        lowLightValRight = Robot.driveTrain.getLightValueRight();
        try {
            wait(10);
        } catch (InterruptedException ex) {
        }
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.driveTrain.LeftRightHot();
        Robot.driveTrain.writeToFile(lowLightValLeft);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

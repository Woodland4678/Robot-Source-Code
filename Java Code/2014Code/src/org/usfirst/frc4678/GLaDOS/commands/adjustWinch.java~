// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4678.GLaDOS.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4678.GLaDOS.Robot;
/**
 *
 */
public class adjustWinch extends Command {
    
    public adjustWinch() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooting);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.shooting.setLatchServo(Robot.latchReadyDistance());
    }
    // Called repeatedly when this Command is scheduled to run
    public void execute() {
        int unwoundWinchDistance = Robot.unwoundWinchDistance();
        int woundWinchDistance = Robot.woundWinchDistance();
        int state = Robot.shooting.getState();
        Robot.debug.print("adjustWinch: current distance is " +  Robot.shooting.getWinchDistance(), 3);
        if (Robot.shooting.getWinchMode() == "Shoot") {
            if (state == 0) {
                SmartDashboard.putBoolean("Can Shoot", false);
                if ((Robot.shooting.getShooterLimit() == false) && (woundWinchDistance >= Robot.shooting.getWinchDistance())) {
                    Robot.shooting.setWinchMotor(-Robot.winchPower());
                } else {
                    Robot.shooting.setState(1);
                }
            } else if (state == 1) {
                SmartDashboard.putBoolean("Can Shoot", false);
                if (unwoundWinchDistance <= Robot.shooting.getWinchDistance()) {
                    Robot.shooting.setWinchMotor(Robot.winchPower());
                } else {
                    Robot.shooting.setState(2);
                }
            } else {
                Robot.shooting.setWinchMotor(0);
                SmartDashboard.putBoolean("Can Shoot", true);
            }
        } else {
            if ((woundWinchDistance >= Robot.shooting.getWinchDistance()) && (Robot.shooting.getWinchDumpState() == 0)) {
                Robot.shooting.setWinchMotor(-Robot.winchPower());
                SmartDashboard.putBoolean("Can Shoot", false);
            } else {
                Robot.shooting.setWinchMotor(0);
                Robot.shooting.setWinchDumpState(1);
                SmartDashboard.putBoolean("Can Shoot", true);
            }
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

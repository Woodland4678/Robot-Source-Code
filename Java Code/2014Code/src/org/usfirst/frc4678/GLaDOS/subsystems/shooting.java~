// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4678.GLaDOS.subsystems;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.SpeedController;
import org.usfirst.frc4678.GLaDOS.RobotMap;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4678.GLaDOS.Robot;
import org.usfirst.frc4678.GLaDOS.commands.adjustWinch;
/**
 *
 */
public class shooting extends Subsystem {
    double latchShootAngle = Robot.latchShootDistance();
    double latchReadyAngle = Robot.latchReadyDistance();
    int state = 0;
    int winchDumpState = 0;
    int shootState = 0;
    int cnt = 0;
    String winchMode = "Shoot";                                                 //Shoot or Dump
    boolean canShoot = true;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel shooterAnglePot = RobotMap.shootingshooterAnglePot;
    Servo latchServo = RobotMap.shootinglatchServo;
    SpeedController winchMotor = RobotMap.shootingwinchMotor;
    AnalogChannel winchPot = RobotMap.shootingwinchPot;
    DigitalInput shooterLimit = RobotMap.shootingshooterLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new adjustWinch());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void setLatchServo(double angle) {
        latchServo.setAngle(angle);
    }
    public void setCanShoot(boolean value) {
        canShoot = value;
        SmartDashboard.putBoolean("Can Shoot", canShoot);
    }
    public boolean canShoot() {
        return canShoot;
    }
    public boolean getShooterLimit() {
        return !shooterLimit.get();                                             //The limit switches are normally closed, so you return the inverse
    }
    public double getShooterAngle() {
        return shooterAnglePot.getValue();
    }
    public double getWinchDistance() {
        return winchPot.getValue();
    }
    public String getWinchMode() {
        return winchMode;
    }
    public void setWinchMode(String newMode) {
        winchMode = newMode;
    }
    public void setWinchDumpState(int newState) {
        winchDumpState = newState;
    }
    public int getWinchDumpState() {
        return winchDumpState;
    }
    public void startWinch() {
        setState(0);
    }
    public int getState() {
        return state;
    }
    public void setState(int newState) {
        state = newState;
    }
    public void setWinchMotor(double power) {
        winchMotor.set(power);
    }
    public int getShootState() {
        return shootState;
    }
    public void setShootState(int newState) {
        shootState = newState;
    }
    public void shoot() {
        if (getWinchMode() == "Shoot") {
            if (shootState == 0) {
                Robot.debug.print("Shooting.shoot: setting servo to " + latchShootAngle, 1);
                setLatchServo(latchShootAngle);                                     // Place servo in shoot position
                cnt = 0;                                                            // Prepare a counter to wait 1 second before putting servo back.
                shootState++;
            } else if (shootState == 1) {
                cnt++;
                if (cnt >= 25) {                                                    // Wait 1 second  before going back to Ready position
                    Robot.debug.print("Shooting.shoot: setting servo to " + latchReadyAngle, 1);
                    setLatchServo(latchReadyAngle);                                 // back to normal servo position (not shooting)
                    shootState++;
                }
            }
        } else {
            if (shootState == 0) {
                Robot.debug.print("Shooting.shoot: setting servo to " + latchShootAngle, 1);
                setLatchServo(latchShootAngle);                                     // Place servo in shoot position
                cnt = 0;                                                            // Prepare a counter to wait 1 second before putting servo back.
                shootState++;
            } else if (shootState == 1) {
                cnt++;
                if (cnt >= 25) {                                                    // Wait 1 second  before going back to Ready position
                    setWinchMotor(Robot.winchPower());
                    System.out.println("unwoundWinchDistance: " + Robot.unwoundWinchDistance() + "  Current Winch Distanfce: " + getWinchDistance());
                    setLatchServo(latchReadyAngle);                                 // back to normal servo position (not shooting)
                    if (Robot.unwoundWinchDistance() >= getWinchDistance()) {
                        setWinchMotor(0);
                        shootState ++;
                    }
                }
            }
        }
    }
}

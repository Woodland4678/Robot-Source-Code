// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4678.GLaDOS.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4678.GLaDOS.Robot;
/**
 *
 */
public class shoot extends Command {
    boolean sDone;
    double goalDistanceToWall = Robot.shootingDistance();
    double executeCount = 0;
    public shoot() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooting);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() { 
        Robot.debug.print("shoot: Initialized", 1);                    
        if (Robot.shooting.canShoot() == true) {
            Robot.shooting.setCanShoot(false);                                  //Don't shoot unless the winch is done.
            Robot.shooting.setShootState(0);   
            sDone = false;
        } else {
            sDone = true;
        }
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if (sDone == false) {
            Robot.shooting.shoot();
        }
        if (Robot.shooting.getShootState() == 2) {
            Robot.debug.print("shoot: Finished shooting", 1);  
            sDone = true;                                                       // Servo part done. Init the winching part.
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return sDone;
    }
    // Called once after isFinished returns true
    protected void end() {
        if (Robot.shooting.getWinchMode() == "Shoot") {
            Robot.shooting.startWinch();
        }
        if (Robot.pickup.getMode() != "manual") {                               //only set the pickup arm if it is not under manual control
            Robot.pickup.setMode("defence");
        }
        Robot.shooting.setCanShoot(true);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}

// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4678.GLaDOS.subsystems;
import org.usfirst.frc4678.GLaDOS.commands.arcadeDrive;
import org.usfirst.frc4678.GLaDOS.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc4678.GLaDOS.Robot;
/**
 *
 */
public class driveTrain extends Subsystem {
    int goToDistanceState = 0;
    double startingLeft, startingRight;
    double leftTargetDistance, rightTargetDistance;
    String direction;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftMotor = RobotMap.driveTrainleftMotor;
    Encoder rightEncoder = RobotMap.driveTrainrightEncoder;
    Encoder leftEncoder = RobotMap.driveTrainleftEncoder;
    SpeedController rightMotor = RobotMap.driveTrainrightMotor;
    AnalogChannel distanceToWall = RobotMap.driveTraindistanceToWall;
    AnalogChannel lightSensorLeft = RobotMap.driveTrainlightSensorLeft;
    AnalogChannel lightSensorRight = RobotMap.driveTrainlightSensorRight;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new arcadeDrive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void arcadeDrive(double x, double y) {
        double ratio;
        int inversion = 1;
        double rightPower;
        double leftPower;
        if (Robot.oi.getBtn6() == true) {                                       //If button 6 is pressed slow down the drive to 70%
            ratio = Robot.slowDriveRatio();
        } else {
            ratio = 1;
        }
        if (Robot.oi.getBtn5() == true) {                                       //If button 5 is pressed invert the drivetrain
            inversion = -1;
        }
        y *= ratio * inversion;
        x *= -ratio;/*
        if (x > 1.0) {                                                          //Limit the x and y to 1 to -1
            x = 1.0;
        } else if (x < -1.0) {
            x = -1.0;
        }
        if (y > 1.0) {
            y = 1.0;
        } else if (y < -1.0) {
            y = -1.0;
        }*/
        rightPower = (y * Math.abs(y)) + (x * x * x);                                 //Cube the x and square the y
        leftPower = (y * Math.abs(y)) - (x * x * x);
        Robot.debug.print("DriveTrain: arcadeDrive right power = " + rightPower, 3);
        Robot.debug.print("DriveTrain: arcadeDrive right power = " + leftPower, 3);                                                   //Set the power if drivetrain is enabled
        setPower(leftPower, -rightPower);
    }
    public void stop() {
        setPower(0, 0);
    }
    public void setPower(double left, double right) {
        Robot.driveTrain.leftMotor.set(left);
        Robot.driveTrain.rightMotor.set(right);
        Robot.debug.print("Drivetrain: setPower setting powers to " + left + ",  " + right, 3);
    }
    public double getLeftEncoder() {
        return leftEncoder.getDistance();
    }
    public double getRightEncoder() {
        return rightEncoder.getDistance() * -1;
    }
    public double getLightValueLeft() {
        double lightValue = lightSensorLeft.getValue();
        Robot.debug.print("DriveTrain: getLightValueLeft = " + lightValue, 1);
        return lightValue;
    }
    public double getLightValueRight() {
        double rightValue = lightSensorRight.getValue();
        Robot.debug.print("DriveTrain: getLightValueRight = " + rightValue, 1);
        return rightValue;
    }
    public void resetEncoders() {
        leftEncoder.reset();
        rightEncoder.reset();
    }
    public void setGoToDistanceState(int newState) {
        goToDistanceState = newState;
    }
    public void setLeftPower(double power) {
        leftMotor.set(power);
    }
    public void setRightPower(double power) {
        rightMotor.set(power);
    }
    public boolean goToDistance(double targetLeft, double targetRight) {
        if (goToDistanceState == 0) {
            startingLeft = getLeftEncoder();
            startingRight = getRightEncoder();
            leftTargetDistance = Math.abs(targetLeft - startingLeft);
            rightTargetDistance = Math.abs(targetRight - startingRight);
            if (targetLeft > startingLeft) {
                direction = "forward";
            } else {
                direction = "backward";
            }
            goToDistanceState++;
        }
        double leftCurrentDistance = Math.abs(getLeftEncoder() - startingLeft);
        double rightCurrentDistance = Math.abs(getRightEncoder() - startingRight);
        double rightPercentThere = rightCurrentDistance / rightTargetDistance;
        double leftPercentThere = leftCurrentDistance / leftTargetDistance;
        Robot.debug.print("DriveTrain: goToDistance left distance  = " + (Math.floor(leftPercentThere * 1000) / 10) + "% (" + Math.floor(leftCurrentDistance) + "/" + Math.floor(leftTargetDistance) + ")", 2);
        Robot.debug.print("DriveTrain: goToDistance right distance = " + (Math.floor(rightPercentThere * 1000) / 10) + "% (" + Math.floor(rightCurrentDistance) + "/" + Math.floor(rightTargetDistance) + ")", 2);
        if ((leftCurrentDistance > leftTargetDistance) || (rightCurrentDistance > rightTargetDistance)) {
            stop();
            goToDistanceState = 0;
            return true;
        }
        double leftPower = Robot.autoAimPower();
        double rightPower = Robot.autoAimPower();
        if ((rightCurrentDistance >= (rightTargetDistance * 0.02)) && (leftCurrentDistance >= (leftTargetDistance * 0.02))) {
            double powerOffset = 20 * Math.abs(rightPercentThere - leftPercentThere);
            if (rightPercentThere > (leftPercentThere + 0.001)) {
                Robot.debug.print("Increasing right power by " + powerOffset, 2);
                leftPower *= 1 - powerOffset;
                rightPower *= 1 + powerOffset;
            }
            if ((rightPercentThere + 0.001) < leftPercentThere) {
                Robot.debug.print("Increasing left power by " + powerOffset, 2);
                leftPower *= 1 + powerOffset;
                rightPower *= 1 - powerOffset;
            }
        }
        if (rightPercentThere < 0.2) {
            double powerMultiplier = 1;
            powerMultiplier = ((rightPercentThere / 0.2) * 0.6) + 0.4;    //The minimum power multiplier is 0.25. The brackets with "right percent there" are a value between 0 and 1
            leftPower = leftPower * powerMultiplier;
            rightPower = rightPower * powerMultiplier;
        }
        Robot.debug.print("Drivetrain: goToDistance motor Powers (l, r) = " + leftPower + "  " + rightPower, 2);
        if ("forward".equals(direction)) {
            setPower(-leftPower, rightPower);
        } else {
            setPower(leftPower, -rightPower);
        }
        return false;
    }
}

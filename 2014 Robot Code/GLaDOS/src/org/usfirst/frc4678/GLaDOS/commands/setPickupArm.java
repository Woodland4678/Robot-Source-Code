// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4678.GLaDOS.commands;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4678.GLaDOS.Robot;
/**
 *
 */
public class setPickupArm extends Command {
    double armHeight = 10;
    boolean dPadPressed = false;
    boolean setToHold = false;                                                  //tells you if you should be checking if the ball is in the robot and adjusting the arm to hold mode
    public setPickupArm() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pickup);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        setToHold = false;
        dPadPressed = false;
        //       Robot.pickup.setPickupArmDefault(Robot.armPassingDistance());
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        SmartDashboard.putDouble("Arm Pot", Robot.pickup.getPickupArmAngle());
        SmartDashboard.putDouble("Arm Offset Pot", Robot.pickup.getPickupArmOffset());
        System.out.println("Arm Offset Pot " + Robot.pickup.getPickupArmOffset());
        SmartDashboard.putString("Arm Mode", Robot.pickup.getMode());
        Robot.debug.print("SetPickupArm: Arm at " + Robot.pickup.getPickupArmAngle() + ", Mode is " + Robot.pickup.getMode(), 3);
        if (Robot.pickup.getIsHoldingBall() == true) {
            if (setToHold == true) {
                Robot.pickup.setHoldState(0);
                if (Robot.pickup.getMode() != "manual") {
                    Robot.pickup.setMode("hold");                               //only set to hold if not under manual control
                }
                setToHold = false;
            }
        } else {
            setToHold = true;
        }
        double state = Robot.pickup.getHoldState();
        if (Robot.pickup.getMode() == "hold") {
            Robot.pickup.setPickupWheelPower(0);
            if (state == 0) {
                if (Robot.pickup.getPickupArmAngle() > Robot.armLowLimit() - 100){
                    Robot.pickup.setHoldState(1);
                } else {
                    Robot.pickup.setPickupArmPower(.75 * Robot.armMaxPower());
                }
            } else if (state == 1) {
                if (Robot.pickup.getPickupArmOffset() < Robot.armOffsetMax()) {
                    Robot.pickup.setPickupArmPower(.75 * Robot.armMaxPower());
                } else {
                    Robot.pickup.setHoldState(2);
                }
            } else {
                if ((Robot.pickup.getPickupArmOffset() < Robot.armOffsetMax()||(Robot.pickup.getPickupArmAngle() < Robot.armLowLimit() - 2))) {
                    Robot.pickup.setPickupArmPower(.75 * Robot.armMaxPower());
                } else {
                    Robot.pickup.setPickupArmPower(0);
                }
            }
        } else if (Robot.pickup.getMode() == "pickup") {
            Robot.pickup.setPickupWheelPower(Robot.pickupWheelPower());
            Robot.pickup.setPickupArm(Robot.armLowLimit() + Robot.armDefaultValue());
        } else if (Robot.pickup.getMode() == "defence") {
            Robot.pickup.setPickupWheelPower(0);
            Robot.pickup.setPickupArm(Robot.armLowLimit() + Robot.armDefenceValue());
        } else if (Robot.pickup.getMode() == "manual") {
            Robot.debug.print("SetPickupArm: under manual control, setting arm power to " + (Robot.armManualPower() * Robot.oi.getJoystick2YL()), 2);
             Robot.pickup.setPickupArmPower(Robot.armManualPower() * Robot.oi.getJoystick2YL());
        }
        if ((Robot.oi.getDPadY2() == -1) && (dPadPressed == false)) {                                       //If the foreward dpad is pressed
            Robot.debug.print("SetPickupArm: setting arm low limit to " + (Robot.armLowLimit() + 5), 1);
            Robot.setArmLowLimit(Robot.armLowLimit() - 5);
            dPadPressed = true;
        } else if ((Robot.oi.getDPadY2() == 1) && (dPadPressed == false)) {
            Robot.debug.print("SetPickupArm: setting arm low limit to " + (Robot.armLowLimit() - 5), 1);
            Robot.setArmLowLimit(Robot.armLowLimit() + 5);
            dPadPressed = true;
        } else {
            dPadPressed = false;
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.pickup.setPickupWheelPower(Robot.pickupWheelPower());
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}

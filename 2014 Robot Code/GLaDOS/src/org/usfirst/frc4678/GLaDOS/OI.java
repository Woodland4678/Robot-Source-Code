// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4678.GLaDOS;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import org.usfirst.frc4678.GLaDOS.commands.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    double deadzone = Robot.deadzone();
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    public JoystickButton G2Btn5;
    public JoystickButton btn5;
    public JoystickButton btn6;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton g1_R2_Shoot;
    public JoystickButton g1_L1_Pass;
    public Joystick gamepad1;
    public JoystickButton r1_changeWinchState;
    public JoystickButton l1_calibratePickup;
    public JoystickButton l2_pass;
    public JoystickButton r2_shoot;
    public JoystickButton x_defenceMode;
    public JoystickButton a_pickupMode;
    public JoystickButton b_holdMode;
    public JoystickButton y_manualOverride;
    public JoystickButton togglePickupWheels;
    public Joystick gamepad2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        gamepad2 = new Joystick(2);
        
        togglePickupWheels = new JoystickButton(gamepad2, 9);
        togglePickupWheels.whileHeld(new pickupWheelsToggle());
        y_manualOverride = new JoystickButton(gamepad2, 4);
        y_manualOverride.whenPressed(new manualOverride());
        b_holdMode = new JoystickButton(gamepad2, 3);
        b_holdMode.whenPressed(new holdMode());
        a_pickupMode = new JoystickButton(gamepad2, 2);
        a_pickupMode.whenPressed(new pickupMode());
        x_defenceMode = new JoystickButton(gamepad2, 1);
        x_defenceMode.whenPressed(new defenceMode());
        r2_shoot = new JoystickButton(gamepad2, 8);
        r2_shoot.whenPressed(new shoot());
        l2_pass = new JoystickButton(gamepad2, 7);
        l2_pass.whileHeld(new pass());
        l1_calibratePickup = new JoystickButton(gamepad2, 5);
        r1_changeWinchState = new JoystickButton(gamepad2, 6);
        r1_changeWinchState.whenPressed(new changeWinchState());
        gamepad1 = new Joystick(1);
        
        g1_L1_Pass = new JoystickButton(gamepad1, 7);
        g1_L1_Pass.whileHeld(new pass());
        g1_R2_Shoot = new JoystickButton(gamepad1, 8);
        g1_R2_Shoot.whenPressed(new shoot());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("pickupWheelsToggle", new pickupWheelsToggle());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        btn5 = new JoystickButton(gamepad1, 5);
        G2Btn5 = new JoystickButton(gamepad2, 5);
        btn6 = new JoystickButton(gamepad1, 6);
    }
    public boolean getBtn6() {
        return btn6.get();
    }
    public boolean getBtn5() {
        return btn5.get();
    }
    public boolean getG2Btn5() {
        return G2Btn5.get();
    }
    public double getJoystickXL() {
        Robot.debug.print("OI: Left joystick x axis = " + gamepad1.getRawAxis(1), 3);
        double axis;
        axis = gamepad1.getRawAxis(1);
        if (Math.abs(axis) < deadzone) {
            axis = 0;
        }
        return axis;
    }
    public double getJoystickYL() {
        Robot.debug.print("OI: Left joystick y axis = " + gamepad1.getRawAxis(2), 3);
        double axis;
        axis = gamepad1.getRawAxis(2);
        if (Math.abs(axis) < deadzone) {
            axis = 0;
        }
        return axis;
    }    
    public double getJoystickXR() {
        Robot.debug.print("OI: Right joystick x axis = " + gamepad1.getRawAxis(3), 3);
        double axis;
        axis = gamepad1.getRawAxis(3);
        if (Math.abs(axis) < deadzone) {
            axis = 0;
        }
        return axis;
    }
    public double getJoystickYR() {
        Robot.debug.print("OI: Right joystick y axis = " + gamepad1.getRawAxis(4), 3);
        double axis;
        axis = gamepad1.getRawAxis(4);
        if (Math.abs(axis) < deadzone) {
            axis = 0;
        }
        return axis;
    }
    public double getDPadX() {
        Robot.debug.print("OI: DPad x axis = " + gamepad1.getRawAxis(5), 3);
        return gamepad1.getRawAxis(5);
    }
    public double getDPadY() {
        Robot.debug.print("OI: DPad y axis = " + gamepad1.getRawAxis(6), 3);
        return gamepad1.getRawAxis(6);
    }
    // start operator Dpad 
        public double getJoystick2XL() {
        Robot.debug.print("OI: Left joystick x axis = " + gamepad2.getRawAxis(1), 3);
        double axis;
        axis = gamepad2.getRawAxis(1);
        if (Math.abs(axis) < deadzone) {
            axis = 0;
        }
        return axis;
    }
    public double getJoystick2YL() {
        Robot.debug.print("OI: Left joystick y axis = " + gamepad2.getRawAxis(2), 3);
        double axis;
        axis = gamepad2.getRawAxis(2);
        if (Math.abs(axis) < deadzone) {
            axis = 0;
        }
        return axis;
    }    
    public double getJoystick2XR() {
        Robot.debug.print("OI: Right joystick x axis = " + gamepad2.getRawAxis(3), 3);
        double axis;
        axis = gamepad2.getRawAxis(3);
        if (Math.abs(axis) < deadzone) {
            axis = 0;
        }
        return axis;
    }
    public double getJoystick2YR() {
        Robot.debug.print("OI: Right joystick y axis = " + gamepad2.getRawAxis(4), 3);
        double axis;
        axis = gamepad2.getRawAxis(4);
        if (Math.abs(axis) < deadzone) {
            axis = 0;
        }
        return axis;
    }
    public double getDPadX2() {
        Robot.debug.print("OI: DPad x axis = " + gamepad2.getRawAxis(5), 3);
        return gamepad2.getRawAxis(5);
    }
    public double getDPadY2() {
        Robot.debug.print("OI: DPad y axis = " + gamepad2.getRawAxis(6), 3);
        return gamepad2.getRawAxis(6);
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getGamepad1() {
        return gamepad1;
    }
    public Joystick getGamepad2() {
        return gamepad2;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

// RobotBuilder Version: 0.0.2
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4678.GLaDOS;
import org.usfirst.frc4678.GLaDOS.subsystems.driveTrain;
import org.usfirst.frc4678.GLaDOS.subsystems.debug;
import org.usfirst.frc4678.GLaDOS.subsystems.shooting;
import org.usfirst.frc4678.GLaDOS.subsystems.pickup;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc4678.GLaDOS.commands.autonomousCommand;
import org.usfirst.frc4678.GLaDOS.commands.autonomousGroup;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    Command autonomousCommand;
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static driveTrain driveTrain;
    public static debug debug;
    public static shooting shooting;
    public static pickup pickup;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public static int debugLevel() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("debugLevel")) {
            prefs.putInt("debugLevel", 2);
        }
        return prefs.getInt("debugLevel", 2);
    }
    public static double slowDriveRatio() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("slowDriveRatio")) {
            prefs.putDouble("slowDriveRatio", 0.7);
        }
        return prefs.getDouble("slowDriveRatio", 0.7);
    }
    public static int autoMode() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("autoMode")) {
            prefs.putInt("autoMode", 0);
        }
        return prefs.getInt("autoMode", 0);
    }
    public static int hotGoalLightIncreace() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("hotGoalLightIncreace")) {
            prefs.putInt("hotGoalLightIncreace", 50);
        }
        return prefs.getInt("hotGoalLightIncreace", 50);
    }
    public static double autoMotorRatio() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("autoMotorRatio")) {
            prefs.putDouble("autoMotorRatio", 1.05);
        }
        return prefs.getDouble("autoMotorRatio", 1.05);
    }
    public static double autoMotorGoalDistance() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("autoMotorGoalDistance")) {
            prefs.putDouble("autoMotorGoalDistance", 300);
        }
        return prefs.getDouble("autoMotorGoalDistance", 300);
    }
    public static double moveDistance() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("moveDistance")) {
            prefs.putDouble("moveDistance", 20);
        }
        return prefs.getDouble("driveForewardDistance", 20);
    }
    public static double autoAimPower() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("autoAimPower")) {
            prefs.putDouble("autoAimPower", .2);
        }
        return prefs.getDouble("autoAimPower", .2);
    }
    public static double shootingDistance() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("shootingDistance")) {
            prefs.putDouble("shootingDistance", 110);
        }
        return prefs.getDouble("shootingDistance", 110);
    }
    public static double turnDistance() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("turnDistance")) {
            prefs.putDouble("turnDistance", 10);
        }
        return prefs.getDouble("turnDistance", 10);
    }
    public static double latchReadyDistance() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("latchReadyValue")) {
            prefs.putDouble("latchReadyValue", 100);
        }
        return prefs.getDouble("latchReadyValue", 100);
    }
    public static double latchShootDistance() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("latchShootValue")) {
            prefs.putDouble("latchShootValue", 0);
        }
        return prefs.getDouble("latchShootValue", 0);
    }
    public static int autoAimMargin() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("autoAimMargin")) {
            prefs.putInt("autoAimMargin", 20);
        }
        return prefs.getInt("autoAimMargin", 20);
    }
    public static int unwoundWinchDistance() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("unwoundWinchDistance")) {
            prefs.putInt("unwoundWinchDistance", 350);
        }
        return prefs.getInt("unwoundWinchDistance", 350);
    }
    public static double winchTimeout() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("winchTimeout")) {
            prefs.putDouble("winchTimeout", 2.5);
        }
        return prefs.getDouble("winchTimeout", 2.5);
    }
    public static double passingAngle() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("passingAngle")) {
            prefs.putDouble("passingAngle", 0);
        }
        return prefs.getDouble("passingAngle", 0);
    }
    public static double armOffsetCenter() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armOffsetCenter")) {
            prefs.putDouble("armOffsetCenter", 400);
        }
        return prefs.getDouble("armOffsetCenter", 400);
    }
    public static double armOffsetMax() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armOffsetMax")) {
            prefs.putDouble("armOffsetMax", 450);
        }
        return prefs.getDouble("armOffsetMax", 450);
    }
    public static double armDefaultValue() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armDefaultValue")) {
            prefs.putDouble("armDefaultValue", -40);
        }
        return prefs.getDouble("armDefaultValue", -40);
    }
    public static double armDefenceValue() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armDefenceValue")) {
            prefs.putDouble("armDefenceValue", -60);
        }
        return prefs.getDouble("armDefenceValue", -60);
    }
    public static double pickupWheelPower() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("pickupWheelPower")) {
            prefs.putDouble("pickupWheelPower", -0.7);
        }
        return prefs.getDouble("pickupWheelPower", -0.7);
    }
   public static double leftPowerOffset() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("leftPowerOffset")) {
            prefs.putDouble("leftPowerOffset", 1.01);
        }
        return prefs.getDouble("pickupWheelPower",1.01);
    }
    public static double winchPower() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("winchPower")) {
            prefs.putDouble("winchPower", .2);
        }
        return prefs.getDouble("winchPower", .2);
    }
    public static double armLowLimit() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armLowLimit")) {
            prefs.putDouble("armLowLimit", 690);
        }
        return prefs.getDouble("armLowLimit", 690);
    }
    public static double armHighLimit() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armHighLimit")) {
            prefs.putDouble("armHighLimit", 150);
        }
        return prefs.getDouble("armHighLimit", 150);
    }
    public static double armMaxReductionValue() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armMaxReductionValue")) {
            prefs.putDouble("armMaxReductionValue", -80);
        }
        return prefs.getDouble("armMaxReductionValue", -80);
    }
    public static double armMinReductionValue() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armMinReductionValue")) {
            prefs.putDouble("armMinReductionValue", -40);
        }
        return prefs.getDouble("armMinReductionValue", -40);
    }
    public static double armManualPower() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armManualPower")) {
            prefs.putDouble("armManualPower", 0.5);
        }
        return prefs.getDouble("armManualPower", 0.5);
    }
    public static double armPassingDistance() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armPassingDistance")) {
            prefs.putDouble("armPassingDistance", -390);
        }
        return prefs.getDouble("armPassingDistance", -390);
    }
    public static double armMaxPower() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("armMaxPower")) {
            prefs.putDouble("armMaxPower", 0.15);
        }
        return prefs.getDouble("armMaxPower", 0.15);
    }
    public static int woundWinchDistance() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("woundWinchDistance")) {
            prefs.putInt("woundWinchDistance", 800);
        }
        return prefs.getInt("woundWinchDistance", 800);
    }
    public static double deadzone() {
        Preferences prefs = Preferences.getInstance();
        if (!prefs.containsKey("deadzone")) {
            prefs.putDouble("deadzone", 0.075);
        }
        return prefs.getDouble("deadzone", 0.075);
    }
    public static void setArmLowLimit(double value) {
        Preferences prefs = Preferences.getInstance();
        prefs.putDouble("armLowLimit", value);
    }
    public void robotInit() {
        try {
            RobotMap.init();
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new driveTrain();
        debug = new debug();
        shooting = new shooting();
        pickup = new pickup();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new autonomousGroup();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }
    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) {
            autonomousCommand.start();
        }
    }
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }
    }
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}

// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc4678.walle.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4678.walle.Robot;

/**
 *
 */
public class  AutonomousCommand extends Command {
	boolean finished = false;
	boolean pickingUpTote = false;
	int autoState = 0;
	int pickupState = 1;
	int count = 0;
    public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	autoState = 0;
    	count = 0;
    	//pickup state is dropped at 0, just below the bottom tote at 1, at the top at 2, and automatically pickup the tote at 3
    	pickupState = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	switch(autoState) {
    	case 0:
    		//hook onto first bin
    		//use arm to grab second
    		//pick up first tote
    		pickupState = 2;
    		count = 0;
    		autoState ++;
    	break;
    	case 1:
    		count ++;
    		//Wait for a bit, to allow the robot to pick up the tote
    		if (count > 50) {
    			autoState ++;
    		}
    	break;
    	case 2:
    		//move forwards a bit
    		if (Robot.drivetrain.goToDistance(206, 206, .5, 20, 20)) {
    			autoState ++;
    			count = 0;
    			pickupState = 3;
    		}
    	break;
    	case 3:
    		count ++;
    		//Wait for a bit, to allow the robot to pick up the tote
    		if (count > 50) {
    			autoState ++;
    		}
    	break;
    	case 4:
    		//move forwards
    		if (Robot.drivetrain.goToDistance(206, 206, .5, 30, 30)) {
    			autoState ++;
    			count = 0;
    			pickupState = 3;
    		}
    	break;
    	case 5:
    		count ++;
    		//Wait for a bit, to allow the robot to pick up the tote
    		if (count > 50) {
    			autoState ++;
    		}
    	break;
    	case 6:
    		if (Robot.drivetrain.goToDistance(-300, -300, .7, 60, 0)) {
    			autoState ++;
    		}
    	break;
    	case 7:
    		//Back up
    		if (Robot.drivetrain.goToDistance(-575, -383, .7, 0, 30)) {
    			autoState ++;
    		}
    	break;
    	case 8:
    		autoState ++;
    	break;
    	case 9:
    		//Drop totes
    		pickupState = 0;
    		count = 0;
    		autoState ++;
    	break;
    	case 10:
    		count ++;
    		//Wait for a bit, to allow the robot to drop the tote
    		if (count > 150) {
    			autoState ++;
    		}
    	break;
    	case 11:
    		if (Robot.drivetrain.goToDistance(200, 200, .8, 10, 50)) {
    			autoState ++;
    		}
    	case 12:
    		pickupState = 2;
    	break;
    	}
    	
    	Robot.logger.debug("Autonomous Command", "Pickup state is " + pickupState);
    	
    	switch(pickupState) {
    	case 0:
    		Robot.pickup.lift(Robot.lifterScoreTarget());
    		
    	break;
    	case 1:
    		Robot.pickup.lift(Robot.lifterPickupTarget());
    	break;
    	case 2:
    		Robot.pickup.lift(Robot.lifterUpperTarget());
    	break;
    	case 3:
    		if (Robot.pickup.lift(Robot.lifterPickupTarget())) {
    			pickupState = 2;
    		}
    	break;
    	}
    	
    	/*
    	switch(autoState){
    	case 0:
    		if (Robot.drivetrain.goToDistance(3000, 4500, 0.4)) {
    			autoState ++;
    		}
    	break;
    	case 1:
    		finished = Robot.drivetrain.turn(90, .4);
    	break;
    	}
    	*/
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finished;
    }

    // Called once after isFinished returns true
    protected void end() {
    	autoState = 0;
    	Robot.drivetrain.setMotor("both", 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	autoState = 0;
    	Robot.drivetrain.setMotor("both", 0);
    }
}

// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc4678.walle.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4678.walle.Robot;

/**
 *
 */
public class  AutonomousCommand extends Command {
	boolean finished = false;
	boolean pickingUpTote = false;
	int autoState = 0;
	int pickupState = 0;
	int armState = 0;
	int count = 0;
	int autoMode = Robot.autoMode();
    public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	autoState = 0;
    	count = 0;
    	pickupState = 5;
    	armState = 5;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	switch (autoMode) {
//--------------------------------------------------------------------------
//------------------------------move 2 meters-------------------------------
//--------------------------------------------------------------------------
    	
    	case 0:
    		switch(autoState) {
    		case 0://Get the pickup ready for the match and move forwards
    			pickupState = 5;
	    		if (Robot.drivetrain.goToDistance(200, 200, .7, 30, 20)) {
	    			autoState ++;
	    		}
	    	break;
    		}
    	break;

//--------------------------------------------------------------------------
//----------------------------1 tote 2 containers---------------------------
//--------------------------------------------------------------------------
    	
    	case 1:
	    	switch(autoState) {
	    	case 0://Grab the first tote and bin(s)
	    		pickupState = 7;
	    		armState = 0;
	    		count = 0;
	    		autoState ++;
	    	break;
	    	case 1://Wait for the robot to pick everything up
	    		count ++;
	    		if (count > 80) {
	    			autoState ++;
	    		}
	    	break;
	    	case 2://Turn to face the auto zone
	    		if (Robot.drivetrain.turn(90, 0.7)) {
	    			autoState ++;
	    			count = 0;
	    		}
	    	break;
	    	case 3://Move into the auto zone
	    		if (Robot.drivetrain.goToDistance(200, 200, .85, 20, 60)) {
	    			autoState ++;
	    			count = 0;
	    		}
	    	break;
	    	case 4://Turn to be parallel to the scoring platform, and start dropping the totes
	    		if (Robot.drivetrain.turn(-90, 0.7)) {
	    			autoState ++;
	    			pickupState = 6;
	    			count = 0;
	    		}
	    	break;
	    	case 10://Wait for the totes to be dropped
	    		count ++;
	    		if (count > 80) {
	    			autoState ++;
	    		}
	    	break;
	    	case 11://Go forwards
	    		if (Robot.drivetrain.goToDistance(120, 120, .6, 10, 10)) {
	    			autoState ++;
	    		}
	    	case 12://Get the pickup ready for the match
	    		pickupState = 5;
	    	break;
	    	}
	    break;
    	
//--------------------------------------------------------------------------
//------------------------------3 totes 1 bin-------------------------------
//--------------------------------------------------------------------------
    	
    	case 2:
	    	switch(autoState) {
	    	case 0://Grab the first tote and bin
	    		pickupState = 2;
	    		armState = 0;
	    		count = 0;
	    		autoState ++;
	    	break;
	    	case 1://Move to the last tote, slowly so that the robot can automatically pick up the other totes
	    		if (Robot.drivetrain.goToDistance(520, 520, .4, 20, 80)) {
	    			autoState ++;
	    			count = 0;
	    		}
	    	break;
	    	case 2://Wait for the robot to pick up the last tote
	    		count ++;
	    		if (count > 60) {
	    			autoState ++;
	    			pickupState = 7;
	    		}
	    	break;
	    	case 3://Go back a bit
	    		if (Robot.drivetrain.goToDistance(-300, -300, .4, 80, 0)) {
	    			autoState ++;
	    		}
	    	break;
	    	case 7://Curve around the scoring platform
	    		if (Robot.drivetrain.goToDistance(-580, -325, .85, 0, 30)) {
	    			autoState ++;
	    		}
	    	break;
	    	case 9://Drop the totes
	    		pickupState = 6;
	    		count = 0;
	    		autoState ++;
	    	break;
	    	case 10://Wait for the robot to drop the totes
	    		count ++;
	    		if (count > 100) {
	    			autoState ++;
	    		}
	    	break;
	    	case 11://Go forwards a bit
	    		if (Robot.drivetrain.goToDistance(60, 60, .6, 10, 10)) {
	    			autoState ++;
	    		}
	    	case 12://Get the pickup ready for the match
	    		pickupState = 5;
	    	break;
	    	}
	    break;
	    	
//--------------------------------------------------------------------------
//--------------------------3 totes and containers--------------------------
//--------------------------------------------------------------------------
	    	
    	case 3:
	    	switch(autoState) {
	    	case 0://Pick up the first bin(s) and tote (after this, the pickup will automatically check for totes and pick them up)
	    		pickupState = 2;
	    		armState = 0;
	    		count = 0;
	    		autoState ++;
	    	break;
	    	case 1://Wait for the Robot to pick up the bin and tote
	    		count ++;
	    		if (count > 40) {
	    			autoState ++;
	    		}
	    	break;
	    	case 2://Move forwards to the next bin
	    		if (Robot.drivetrain.goToDistance(250, 250, .85, 10, 60)) {
	    			autoState ++;
	    			armState = 0;
	    			count = 0;
	    		}
	    	break;
	    	case 3://Wait for the robot to pick up the container
	    		count ++;
	    		if (count > 80) {
	    			autoState ++;
	    		}
	    	break;
	    	case 4://Move forwards to the last tote
	    		if (Robot.drivetrain.goToDistance(235, 235, .85, 20, 60)) {
	    			autoState ++;
	    			armState = 5;
	    			count = 0;
	    		}
	    	break;
	    	case 5://Wait for the robot to automatically pick up the tote
	    		count ++;
	    		if (count > 50) {
	    			autoState ++;
	    		}
	    	break;
	    	case 6://Drive backwards a bit
	    		if (Robot.drivetrain.goToDistance(-300, -300, .85, 60, 0)) {
	    			autoState ++;
	    			pickupState = 7;
	    		}
	    	break;
	    	case 7://Curve around the end of the scoring platform
	    		if (Robot.drivetrain.goToDistance(-580, -325, .85, 0, 30)) {
	    			autoState ++;
	    		}
	    	break;
	    	case 8://Drop the totes
	    		pickupState = 6;
	    		count = 0;
	    		autoState ++;
	    	break;
	    	case 9://Wait for the robot to drop the totes
	    		count ++;
	    		if (count > 100) {
	    			autoState ++;
	    		}
	    	break;
	    	case 10://Go forwards to clear the totes
	    		if (Robot.drivetrain.goToDistance(80, 80, .6, 10, 10)) {
	    			autoState ++;
	    			pickupState = 5;
	    		}
	    	break;
	    	}
	    break;
    	}
    	
//--------------------------------------------------------------------------
//-------------------------------Pickup setter------------------------------
//--------------------------------------------------------------------------
    	
    	//This code automatically sets the pickup height based on the pickupState
    	//States 0-3 automatically pick up a tote when it is under the robot, and
    	//State 4 makes the pickup ready to pick up
    	//State 5 lifts the pickup to the max height
    	//State 6 lowers the pickup to the minimum height
    	//State 7 lowers the pickup to the minimum height without scoring the totes
    	switch(pickupState) {
    	case 0://Wait for a tote to be sensed
    		if (Robot.pickup.getDrivingOverTote()) {
    			pickupState ++;
    		}
    	break;
    	case 1://Wait for the tote to pass under the robot
    		if (!Robot.pickup.getDrivingOverTote()) {
    			pickupState ++;
    		}
    	break;
    	case 2://Drop the pickup down
    		if (Robot.pickup.lift(Robot.lifterPickupTarget())) {
    			pickupState ++;
    		}
    	break;
    	case 3://Lift the pickup up, and then go back to state 0
    		if (Robot.pickup.lift(Robot.lifterUpperTarget())) {
    			pickupState = 0;
    		}
    	break;
    	case 4://Go to the pickup target
    		Robot.pickup.lift(Robot.lifterPickupTarget());
    	break;
    	case 5://Go to the pickup max
    		Robot.pickup.lift(Robot.lifterUpperTarget());
    	break;
    	case 6://Go to the pickup min
    		Robot.pickup.lift(Robot.lifterScoreTarget());
    	break;
    	case 7://Go as low as the pickup can go without scoring
    		Robot.pickup.lift(Robot.lifterSixToteTarget());
    	break;
    	}
    	
//--------------------------------------------------------------------------
//-------------------------------Arm setter------------------------------
//--------------------------------------------------------------------------
    	
    	//When the pickup state is 0, it goes through the pickup loop
    	switch(armState) {
    	case 0://go to pickup position
    		if (Robot.arm.setArm(Robot.armPickupPosition())) {
    			armState ++;
    		}
    	case 1://Close the claw
    		if (true) {//Add code to close the claw
    			armState ++;
    		}
    	break;
    	case 2://Go to set bin position
    		if (Robot.arm.setArm(Robot.armSetBinPosition())) {
    			armState ++;
    		}
    	break;
    	case 3://Open the claw
    		if (true) {//Add code to open the claw
    			armState ++;
    		}
    	case 4://Go to pickup position
    		Robot.arm.setArm(Robot.armPickupPosition());
    	break;
    	case 5://Go to rest position
    		Robot.arm.setArm(Robot.armRestPosition());
    	break;
    	case 6://Go to the bin setting position
    		Robot.arm.setArm(Robot.armSetBinPosition());
    	break;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finished;
    }

    // Called once after isFinished returns true
    protected void end() {
    	autoState = 0;
    	Robot.pickup.setLifterPower(0);
    	Robot.drivetrain.setMotor("both", 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	autoState = 0;
    	Robot.pickup.setLifterPower(0);
    	Robot.drivetrain.setMotor("both", 0);
    }
}

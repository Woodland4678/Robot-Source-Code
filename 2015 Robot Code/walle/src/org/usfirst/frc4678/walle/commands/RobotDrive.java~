// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.walle.commands;

import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4678.walle.Robot;

/**
 *
 */
public class  RobotDrive extends Command {
	double joystickX;
	double joystickY;
	double leftPower;
	double rightPower;
	double current0;
	PowerDistributionPanel pdp = new PowerDistributionPanel();
    public RobotDrive() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Get the joystick values
    	joystickX = Robot.oi.getGamepad1().getX();
        joystickY = Robot.oi.getGamepad1().getY();
        //Determine the powers based on the joystick values, cubic for side to side
        leftPower = (Math.abs(joystickY) * joystickY) - (joystickX * joystickX * joystickX);
        rightPower = (Math.abs(joystickY) * joystickY) + (joystickX * joystickX * joystickX);
        //Set the drivetrain motors
        Robot.drivetrain.setMotor("left", leftPower);
        Robot.drivetrain.setMotor("right", rightPower);
        SmartDashboard.putNumber("Right Motor Power", rightPower);
        SmartDashboard.putNumber("Left Motor Power", leftPower);
        SmartDashboard.putNumber("Current through 0", current0);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

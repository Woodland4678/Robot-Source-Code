// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.walle.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4678.walle.Robot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;

/**
 *
 */
public class  goToScore extends Command {
	double difference;
	double leftCurrent;
	double rightCurrent;
	double power = 0.1;
	double MAX_POWER_CHANGE = 0.01;
	double GOAL_SPEED = 4;//Target encoder clicks per turn
	double lastEncoderValue = 0;
	double currentEncoderValue = 0;
	PowerDistributionPanel pdp = new PowerDistributionPanel();
    public goToScore() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	lastEncoderValue = Robot.drivetrain.getRightEncoder();
    	power = 0.1;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	leftCurrent = pdp.getCurrent(0);
    	rightCurrent = pdp.getCurrent(1);
    	currentEncoderValue = Robot.drivetrain.getRightEncoder();
    	difference = Math.abs(currentEncoderValue - lastEncoderValue);
    	
    	if (difference > GOAL_SPEED + 1) {
    		power -= MAX_POWER_CHANGE;
    	} else if (difference < GOAL_SPEED - 1) {
    		power += MAX_POWER_CHANGE;
    	}
    	//Negative, because it is going backwards
    	Robot.drivetrain.setMotor("both", power);
    	System.out.println("Going to score, setting powers to " + power + ", difference = " + difference);
    	
    	lastEncoderValue = Robot.drivetrain.getRightEncoder();
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetrain.setMotor("both", 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.drivetrain.setMotor("both", 0);
    }
}

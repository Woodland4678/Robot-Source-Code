// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.walle.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4678.walle.Robot;

/**
 *
 */
public class  keepClawLevel extends Command {
	double armDegrees = Robot.arm.getArmDegrees();
	double goalClawDegrees;
	double goalClawPosition;
	double clawOffset = -1;
    public keepClawLevel() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.claw);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {

    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Adjust the angle of the claw when the dpad is held
    	if (Robot.oi.getGamepad2().getRawAxis(5) != 0) {
    		Robot.claw.setClawTargetDegrees(Robot.claw.getClawTargetDegrees() + (Robot.oi.getGamepad2().getRawAxis(5) / 2));
    	}
    	
    	armDegrees = Robot.arm.getArmDegrees();
    	if (clawOffset == -1) {
    		clawOffset = -armDegrees - Robot.claw.getClawTargetDegrees();
    	}
    	goalClawDegrees = armDegrees + Robot.claw.getClawTargetDegrees() + clawOffset;
    	goalClawPosition = (goalClawDegrees * Robot.clawTicsPerDegree());
    	Robot.claw.setClaw(goalClawPosition);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.claw.setClawMotor(0);
    }
}

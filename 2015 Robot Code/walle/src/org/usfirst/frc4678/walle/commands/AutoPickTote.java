// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.walle.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4678.walle.Robot;

/**
 *
 */
public class  AutoPickTote extends Command {
	int pickupState = 0;
    public AutoPickTote() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pickup);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	pickupState = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (Robot.drivetrain.isDriving()) {//To ensure this does not run in autonomous
	    	switch(pickupState) {
	    	case 0://Wait for a tote to be sensed
	    		if (Robot.pickup.getDrivingOverTote()) {
	    			pickupState ++;
	    		}
	    	break;
	    	case 1://Wait for the tote to pass under the robot
	    		if (!Robot.pickup.getDrivingOverTote()) {
	    			pickupState ++;
	    		}
	    	break;
	    	case 2://Drop the pickup down
	    		if (Robot.pickup.lift(Robot.lifterPickupTarget())) {
	    			pickupState ++;
	    		}
	    	break;
	    	case 3://Lift the pickup up, and then go back to state 0
	    		if (Robot.pickup.lift(Robot.lifterUpperTarget())) {
	    			pickupState = 0;
	    		}
	    	break;
	    	}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc4678.walle.subsystems;

import org.usfirst.frc4678.walle.Robot;
import org.usfirst.frc4678.walle.RobotMap;
import org.usfirst.frc4678.walle.commands.*;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drivetrain extends Subsystem {
	long goalTime;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftMotor = RobotMap.drivetrainLeftMotor;
    SpeedController rightMotor = RobotMap.drivetrainRightMotor;
    AnalogInput leftDistSensor = RobotMap.drivetrainLeftDistSensor;
    AnalogInput rightDistSensor = RobotMap.drivetrainRightDistSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new RobotDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void setMotor(String motor, double power) {
    	Robot.logger.debug("Drivetrain", "Setting " + motor + " to " + power);
    	if (motor.equals("left") || motor.equals("Left")) {
    		leftMotor.set(power);
    	} else if (motor.equals("right") || motor.equals("Right")) {
    		rightMotor.set(power);
    	} else if (motor.equals("both") || motor.equals("Both")) {
    		leftMotor.set(power);
    		rightMotor.set(power);
    	}
    }
    
    //Must be called until it is true
    public boolean timedDrive(double leftPower, double rightPower, int milliseconds) {
    	//Goal time is -1 if it has not been set
    	if (goalTime == -1) {
    		goalTime = System.currentTimeMillis() + milliseconds;
    	}
    	
    	if (goalTime > System.currentTimeMillis()) {
    		Robot.drivetrain.setMotor("left", leftPower);
    		Robot.drivetrain.setMotor("right", rightPower);
    		
    	} else {
    		Robot.drivetrain.setMotor("both", 0);
    		goalTime = -1;
    		return true;
    	}
    	
    	return false;
    }
    
    public int getLeftDistance() {return leftDistSensor.getValue();}
    
    public int getRightDistance() {return rightDistSensor.getValue();}
}


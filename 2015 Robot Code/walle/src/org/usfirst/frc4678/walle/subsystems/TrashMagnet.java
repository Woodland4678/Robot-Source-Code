// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.walle.subsystems;

import org.usfirst.frc4678.walle.Robot;
import org.usfirst.frc4678.walle.RobotMap;
import org.usfirst.frc4678.walle.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class TrashMagnet extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Servo latchServo = RobotMap.trashMagnetlatchServo;
    SpeedController garbageWinch = RobotMap.trashMagnetgarbageWinch;
    AnalogPotentiometer garbagePosition = RobotMap.trashMagnetgarbagePosition;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    double error;
    double cnt;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void setLatchServo(double target) {
    	latchServo.set(target);
    }
	 public void setGarbageWinch(double target) {
	    	
	    	double power = Robot.garbageMagnetSpeed();
	    	double garbageWinchMaxSpeed = Robot.garbageMagnetSpeed();
	    	double garbageTarget = target;
	    	SmartDashboard.putNumber("garbagePosition", garbagePosition.get());
	    			
			//Finds the difference between target and current position
			error = garbageTarget - garbagePosition.get();
			//if the difference is greater than 0 power should be full
			if (error > 0.1) {
				power = garbageWinchMaxSpeed;
			}
			//if the difference is less than 0, power should be full in reverse
			else if (error < -0.1) {
				power = -garbageWinchMaxSpeed;
			}
			else {
				power = error * 33;
				if (power > garbageWinchMaxSpeed){
					power = garbageWinchMaxSpeed;
				}
				else if (power < -garbageWinchMaxSpeed) {
					power = -garbageWinchMaxSpeed;
				}
			}		
			System.out.println("TrashMagnet Error: " + error);
			System.out.println("Setting trashmagnet power to: " + power);
			System.out.println("trashMagnet Position " + garbagePosition.get());
			garbageWinch.set(-power);
			
			if (Math.abs(error) < 0.1) {
				cnt = 0;
//				System.out.println("garbage winch has reached the target!!!!!!!!!!!!!!!!!!!!!!!!!!!");
				//return true;
			}
    	//return false;
    }
	 public double getGarbagePosition() {
		 return garbagePosition.get();
	 }
	 public void setTrashMagnetMotor(double power) {
		 garbageWinch.set(power);
	 }
	 public void stopTrashMagnetMotor() {
		 garbageWinch.disable();
	 }
}


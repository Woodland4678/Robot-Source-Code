// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.walle.subsystems;

import org.usfirst.frc4678.walle.Robot;
import org.usfirst.frc4678.walle.RobotMap;
import org.usfirst.frc4678.walle.commands.*;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Claw extends Subsystem {
	double power;
	double error;
	double clawMaxPower;
	double clawTarget;
	boolean getStopped;
	double clawTargetDegreesToFloor = 0;
	int clawStartingValue = 0;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController clawMotor = RobotMap.clawClawMotor;
    Encoder clawPosition = RobotMap.clawClawPosition;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new keepClawLevel());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void setClawMotor(double power) {
    	clawMotor.set(power);
    	System.out.println("Power: " + power);
    }
    
    public void resetClawEncoder(int value) { clawStartingValue = value; }
    
    public int getClawPosition() { return clawPosition.get(); }
    
    public void setClawTargetDegrees(double target) {
    	clawTargetDegreesToFloor = target;
    }
    
    public double getClawTargetDegrees() { return clawTargetDegreesToFloor; }
    
    public void setClaw(double target) {
    	getStopped = clawPosition.getStopped();
    	power = Robot.clawMaxPower();
    	clawMaxPower = Robot.clawMaxPower();
    	clawTarget = target;
    	//calculating the difference between the target and current position
    	error = clawTarget - clawPosition.get();
    	
    	//if the difference is greater than 0.5 power should be full forward
    	if (error > 30) {
			power = clawMaxPower;
		}
		//if the difference is less than -0.5, power should be full in reverse
		else if (error < -30) {
			power = -clawMaxPower;
		}
    	
		else {
			if (Robot.squeeze.getOpenPosition() < 0.36 && Robot.squeeze.getOpenPosition() > 0.33) {
				power = error * 0.1;
			} else {
				power = error * 0.03;
			}
			
			if (power > clawMaxPower) {
				power = clawMaxPower;
			}
			else if (power < -clawMaxPower) {
				power = -clawMaxPower;
			}
		}
    	clawMotor.set(-power);
    	
    }
    
    public void resetClawPosition() {
    	clawPosition.reset();
    }
}


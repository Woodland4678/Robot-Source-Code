// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.walle.subsystems;

import org.usfirst.frc4678.walle.Robot;
import org.usfirst.frc4678.walle.RobotMap;
import org.usfirst.frc4678.walle.commands.*;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Pickup extends Subsystem {
	double distanceFromTarget = 0;
	double error = 0;
	int lifterState = 0;
	double cnt;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogPotentiometer lifterHeight = RobotMap.pickupLifterHeight;
    SpeedController lifterMotor = RobotMap.pickupLifterMotor;
    Servo lifterServo = RobotMap.pickupLifterServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void setLifterPower(double power) {
    	lifterMotor.set(power);
    	Robot.logger.debug("Pickup", "Setting lifter power to " + power);
    }
    
    public double getLifterHeight() {
    	return lifterHeight.get();
    }
    public void setLifterServo(double position) {
    	lifterServo.set(position);
    }
    public double getServoPos() {
    	return lifterServo.get();
    }
    public void setLifterState(int state){
    	lifterState = state;
    	cnt = 0;
    }
    
    public boolean lift(double target) {
    	double power = Robot.lifterPower();
    	double lifterMaxPower = Robot.lifterPower();
    	double lifterTarget = target;
    	SmartDashboard.putNumber("Lifter Height", lifterHeight.get());
    	switch(lifterState) {
    		case 0:
    			lifterServo.set(Robot.servoRemoveLock());
    			lifterMotor.set(0.2);
    			cnt = 0;
    			lifterState ++;
    			break;
    		case 1:
    			
    			if (cnt >= 30) {
    				lifterState++;
    			}
    			cnt++;
    			break;
    		case 2:
    			
    			//Finds the difference between target and current position
    			error = lifterTarget - lifterHeight.get();
    			//if the difference is greater than 0 power should be full
    			if (error > 0) {
    				power = lifterMaxPower;
    			}
    			//if the difference is less than 0, power should be full in reverse
    			else if (error < 0) {
    				power = -lifterMaxPower;
    			}
    					
    			SmartDashboard.putNumber("Lifter Power", power);
    			lifterMotor.set(power);
    			
    			if (Math.abs(error) < 0.1) {
    				lifterMotor.set(0);
    				lifterServo.set(Robot.servoLockPos());
    				cnt = 0;
    				lifterState++;
    				return true;
    			}
    			System.out.println("error: " + error);
    			System.out.println("Power: " + power);

    			break;
    		/*case 3:
    			if (cnt > 30) {
    				lifterState++;
    			}
    			cnt++;
    			break;
    		case 4:
    			lifterMotor.set(0);
    			lifterState = 0;
    			cnt = 0;*/
    			
    			
    		}
    	return false;
    	
    }
  
}


// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.walle.subsystems;

import org.usfirst.frc4678.walle.Robot;
import org.usfirst.frc4678.walle.RobotMap;
import org.usfirst.frc4678.walle.commands.*;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class squeeze extends Subsystem {
	double openPower;
	double openMaxPower;
	double openTarget;
	double openError;
	double current2;
	double factor = 0.5;
	int cnt;
	int openState = 0;
	double startingPosition;
	PowerDistributionPanel pdp = new PowerDistributionPanel();
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogPotentiometer armOpenPosition = RobotMap.squeezeArmOpenPosition;
    SpeedController openMotor = RobotMap.squeezeOpenMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public double getOpenPosition() {
    	return armOpenPosition.get();
    }
    public void resetFactor() {
    }
    public void setOpenState(int state) {
    	openState = state;
    }
    public void openArm(double target) {
    	current2 = pdp.getCurrent(2);
    	openPower = Robot.armMaxOpenPower();
    	openMaxPower = Robot.armMaxOpenPower();
    	openTarget = target;
    	openError = openTarget - armOpenPosition.get();
    	System.out.println("Error: " + openError);
    	System.out.println("Target: " + openTarget);
    	if (openError > 0.3) {
			openPower = openMaxPower;
		}
		//if the difference is less than 0, power should be full in reverse
		else if (openError < -0.3) {
			openPower = -openMaxPower;
		}
		else {
			openPower = openError * 6;
			
			if (openPower > openMaxPower){
				openPower = openMaxPower;
			}
			else if (openPower < -openMaxPower) {
				openPower = -openMaxPower;
			}
		}
		openMotor.set(-openPower);
		System.out.println("Power: " + openPower);
    }
   /* public void openArmControl(double target) {
    	current2 = pdp.getCurrent(2);
    	openMaxPower = Robot.armMaxOpenPower();
    	

    	switch(openState) {
    		case 0:
    	    	startingPosition = armOpenPosition.get();
    	    	openState++;
    	    	factor = 0;
    	    	break;
    		case 1:
    			openTarget = (target - startingPosition) * factor + startingPosition;
    			System.out.println("Target: " + openTarget);
    			if (factor < 1) {
    			factor = factor + 0.03;
    			}
    			openState++;
    			break;
    		case 2:
    	    	
    	    	System.out.println("Factor: " + factor);
    	    	System.out.println("Input Target: " + target);
    	    	System.out.println("Starting Position: " + startingPosition);
    			openError = openTarget - armOpenPosition.get();
    	    	System.out.println("Error: " + openError);
		    	if (openError > 0.3) {
					openPower = openMaxPower;
				}
				//if the difference is less than 0, power should be full in reverse
				else if (openError < -0.3) {
					openPower = -openMaxPower;
				}
				else {
					openPower = openError * 6;
					
					if (openPower > openMaxPower){
						openPower = openMaxPower;
					}
					else if (openPower < -openMaxPower) {
						openPower = -openMaxPower;
					}
				}
		    	openState = 1;
		    	break;
    		}
		openMotor.set(-openPower);
		System.out.println("Power: " + openPower);
		cnt++;
    }*/
}

